const chlapci: number[][] = [
  [11.4, 12.3, 13.0, 13.9, 15.1, 16.0, 17.3],
  [14.5, 15.4, 16.3, 17.4, 18.7, 19.9, 21.2],
  [13.8, 14.6, 15.4, 16.4, 17.5, 18.7, 19.8],
  [13.4, 14.1, 14.9, 15.9, 16.9, 17.9, 19.0],
  [13.2, 13.9, 14.7, 15.5, 16.6, 17.6, 18.7],
  [13.1, 13.7, 14.5, 15.4, 16.4, 17.5, 18.7],
  [13.0, 13.7, 14.5, 15.4, 16.5, 17.6, 18.9],
  [13.1, 13.8, 14.6, 15.5, 16.7, 18.0, 19.5],
  [13.2, 13.9, 14.8, 15.9, 17.2, 18.6, 20.2],
  [13.5, 14.2, 15.1, 16.2, 17.7, 19.3, 21.3],
  [13.7, 14.5, 15.5, 16.7, 18.3, 20.1, 22.3],
  [14.1, 14.9, 15.9, 17.2, 18.9, 20.8, 23.3],
  [14.5, 15.4, 16.4, 17.8, 19.5, 21.5, 24.1],
  [15.0, 15.9, 16.9, 18.4, 20.1, 22.1, 24.7],
  [15.7, 16.6, 17.7, 19.1, 20.9, 22.9, 25.4],
  [16.3, 17.3, 18.3, 19.7, 21.5, 23.5, 26.0],
  [17.1, 18.0, 19.1, 20.6, 22.3, 24.2, 26.7],
  [17.6, 18.6, 19.7, 21.1, 22.9, 24.8, 27.1],
  [18.2, 19.1, 20.2, 21.7, 23.5, 25.4, 27.7]
];


const divky: number[][] = [
  [11.1, 11.8, 12.4, 13.4, 14.3, 15.3, 16.5],
  [14.3, 15.1, 16.0, 17.1, 18.3, 19.4, 20.7],
  [13.6, 14.4, 15.2, 16.1, 17.2, 18.2, 19.3],
  [13.2, 13.9, 14.7, 15.6, 16.5, 17.5, 18.5],
  [13.1, 13.8, 14.5, 15.4, 16.4, 17.4, 18.5],
  [12.8, 13.5, 14.2, 15.2, 16.3, 17.3, 18.5],
  [12.7, 13.4, 14.3, 15.3, 16.4, 17.6, 18.9],
  [12.7, 13.5, 14.4, 15.5, 16.8, 18.1, 19.6],
  [12.8, 13.7, 14.7, 15.9, 17.3, 18.9, 20.6],
  [13.0, 13.8, 14.9, 16.2, 17.8, 19.5, 21.5],
  [13.2, 14.1, 15.3, 16.7, 18.4, 20.2, 22.4],
  [13.6, 14.5, 15.7, 17.1, 18.9, 20.9, 23.3],
  [14.1, 15.1, 16.2, 17.7, 19.6, 21.6, 24.1],
  [15.0, 15.9, 17.1, 18.6, 20.5, 22.6, 25.2],
  [15.8, 16.8, 18.0, 19.5, 21.3, 23.4, 25.8],
  [16.4, 17.4, 18.5, 19.9, 21.7, 23.6, 26.0],
  [17.0, 18.0, 19.1, 20.5, 22.2, 24.2, 26.5],
  [17.4, 18.3, 19.5, 20.9, 22.7, 24.6, 27.0],
  [17.6, 18.6, 19.7, 21.2, 23.0, 25.1, 27.6]
];


export function get_percentiles(gender: 'muž' | 'žena'): number[][] {
  return gender === 'muž' ? chlapci : divky;
}

export const percentile_ranks: number[] = [3, 10, 25, 50, 75, 90, 97] as const;
export type PercentileRank = typeof percentile_ranks[number];

export function compute_percentile_rank_upper_bound(bmi: number, percentiles_for_age_group: number[]): number {
  console.log('bmi', bmi);
  const percentile_upper_bound = percentiles_for_age_group.find(percentile => percentile > bmi);

  if (!percentile_upper_bound) {
    return 100;
  } else {
    const first_larger_percentile_index: number = percentiles_for_age_group.indexOf(percentile_upper_bound);
    console.log('first_larger_percentile_index', first_larger_percentile_index);
    return percentile_ranks[first_larger_percentile_index];
  }
}